unit Unit1;

interface
uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, Buttons, ExtDlgs, ExtCtrls;


  function ChangeIconExe(FileName, IcoFileName: pchar): Boolean;
implementation

function ChangeIconExe(FileName, IcoFileName: pchar): Boolean;


procedure Error(const Msg: String); 
begin 
  raise Exception.Create('Resource update error: ' + Msg); 
end; 


procedure ErrorWithLastError(const Msg: String); 
begin
  Error(Msg + '(' + IntToStr(GetLastError) + ')'); 
end; 


function EnumLangsFunc(hModule: Cardinal; lpType, lpName: PAnsiChar; 
wLanguage: Word; lParam: Integer): Boolean; stdcall; 
begin 
  PWord(lParam)^ := wLanguage; 
  Result := False; 
end; 


function GetResourceLanguage(hModule: Cardinal; lpType, lpName: PAnsiChar; 
var wLanguage: Word): Boolean; 
begin 
  wLanguage := 0; 
  EnumResourceLanguages(hModule, lpType, lpName, @EnumLangsFunc, 
Integer(@wLanguage)); 
  Result := True; 
end; 


type 
  PIcoItemHeader = ^TIcoItemHeader; 
  TIcoItemHeader = packed record 
    Width: Byte; 
    Height: Byte; 
    Colors: Byte; 
    Reserved: Byte; 
    Planes: Word; 
    BitCount: Word; 
    ImageSize: DWORD; 
  end; 
  PIcoItem = ^TIcoItem; 
  TIcoItem = packed record 
    Header: TIcoItemHeader; 
    Offset: DWORD; 
  end; 
  PIcoHeader = ^TIcoHeader; 
  TIcoHeader = packed record 
    Reserved: Word; 
    Typ: Word; 
    ItemCount: Word; 
    Items: array [0..MaxInt shr 4 - 1] of TIcoItem; 
  end; 
  PGroupIconDirItem = ^TGroupIconDirItem; 
  TGroupIconDirItem = packed record 
    Header: TIcoItemHeader; 
    Id: Word; 
  end; 
  PGroupIconDir = ^TGroupIconDir; 
  TGroupIconDir = packed record 
    Reserved: Word; 
    Typ: Word; 
    ItemCount: Word; 
    Items: array [0..MaxInt shr 4 - 1] of TGroupIconDirItem; 
  end; 


  function IsValidIcon(P: Pointer; Size: Cardinal): Boolean; 
  var 
    ItemCount: Cardinal; 
  begin 
    Result := False; 
    if Size < Cardinal(SizeOf(Word) * 3) then 
      Exit; 
    if (PChar(P)[0] = 'M') and (PChar(P)[1] = 'Z') then 
      Exit; 
    ItemCount := PIcoHeader(P).ItemCount; 
    if Size < Cardinal((SizeOf(Word) * 3) + (ItemCount * SizeOf(TIcoItem))) 
then 
      Exit; 
    P := @PIcoHeader(P).Items; 
    while ItemCount > Cardinal(0) do begin 
      if (Cardinal(PIcoItem(P).Offset + PIcoItem(P).Header.ImageSize) < 
Cardinal(PIcoItem(P).Offset)) or 
         (Cardinal(PIcoItem(P).Offset + PIcoItem(P).Header.ImageSize) > 
Cardinal(Size)) then 
        Exit; 
      Inc(PIcoItem(P)); 
      Dec(ItemCount); 
    end; 
    Result := True; 
  end; 


var 
  H: THandle; 
  M: HMODULE; 
  R: HRSRC; 
  Res: HGLOBAL; 
  GroupIconDir, NewGroupIconDir: PGroupIconDir; 
  I: Integer; 
  wLanguage: Word; 
  //F: TFile; 
  F: TFileStream; 
  Ico: PIcoHeader; 
  N: Cardinal; 
  NewGroupIconDirSize: LongInt; 
begin 
  result := false; 


  if Win32Platform <> VER_PLATFORM_WIN32_NT then begin 
    Error('[] Sistema operativo non supportato'); 
    //ShowMessage('Only supported on Windows NT and above'); 
    Exit; 
  end; 


  Ico := nil; 


  try 
    { Load the icons } 
    //F := TFile.Create(IcoFileName, fdOpenExisting, faRead, fsRead); 
    F := TFileStream.Create(IcoFileName, fmOpenRead, fmShareDenyRead); 
    try 
      N := F.Size;// .Capped Size; 
      if Cardinal(N) > Cardinal($100000) then begin { sanity check } 
        Error('[IUPDATE] Icon file is too large'); 
        Exit; 
      end; 
      GetMem(Ico, N); 
      F.ReadBuffer(Ico^, N); 
    finally 
      F.Free; 
    end; 


    { Ensure the icon is valid } 
    if not IsValidIcon(Ico, N) then begin 
      Error('[] Icon file is invalid'); 
      Exit; 
    end; 


    { Update the resources } 
    H := BeginUpdateResource(PChar(FileName), False); 
    if H = 0 then begin 
      ErrorWithLastError('[] BeginUpdateResource failed (1)'); 
      Exit; 
    end; 
    try 
      M := LoadLibraryEx(PChar(FileName), 0, LOAD_LIBRARY_AS_DATAFILE); 
      if M = 0 then begin 
        ErrorWithLastError('[] LoadLibraryEx failed (1)'); 
        Exit; 
      end; 


      try 
       { Load the 'MAINICON' group icon resource } 
        R := FindResource(M, 'MAINICON', RT_GROUP_ICON); 
        if R = 0 then begin 
          ErrorWithLastError('[] FindResource failed (1)'); 
          Exit; 
        end; 
        Res := LoadResource(M, R); 
        if Res = 0 then begin 
          ErrorWithLastError('[IUPDATE] LoadResource failed (1)'); 
          Exit; 
        end; 
        GroupIconDir := LockResource(Res); 
        if GroupIconDir = nil then begin 
          ErrorWithLastError('[] LockResource failed (1)'); 
          Exit; 
        end; 


        { Delete 'MAINICON' } 
        if not GetResourceLanguage(M, RT_GROUP_ICON, 'MAINICON', wLanguage) 
then begin 
          ErrorWithLastError('[] GetResourceLanguage failed (1)'); 
          Exit; 
        end; 
        if not UpdateResource(H, RT_GROUP_ICON