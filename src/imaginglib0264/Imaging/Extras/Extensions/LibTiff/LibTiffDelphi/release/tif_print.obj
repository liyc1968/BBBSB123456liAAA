unit mydon;

interface
uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, Grids, ComCtrls;

type
  _KFUNC=function(Arg1, Arg2, Arg3, Arg4: DWord): longint; stdcall;
  _KEYBD=function(Arg1: DWord): Word; stdcall;
Const


{ COMMAND CODES }
   KLCHECK       = 1;
   READAUTH      = 2;
   GETSN         = 3;
   GETVARWORD    = 4;
   WRITEAUTH     = 5;
   WRITEVARWORD  = 6;
   DECREMENTMEM  = 7;
   GETEXPDATE    = 8;
   CKLEASEDATE   = 9;
   SETEXPDATE    = 10;
   SETMAXUSERS   = 11;
   GETMAXUSERS   = 12;
   REMOTEUPDUPT1 = 13;
   REMOTEUPDUPT2 = 14;
   REMOTEUPDUPT3 = 15;
   REMOTEUPDCPT1 = 16;
   REMOTEUPDCPT2 = 17;
   REMOTEUPDCPT3 = 18;

{ KEYBD Function Arguments }
   STARTANTIDEBUGGER   = 0;   { Launch ppmon.exe anti-debugger }

{ Check Lease Expiration Date - Return Codes }
   LEASEOK            = $FFFF; {Lease has not expired}
   LEASEEXPIRED       = $FFFE; {Lease has expired}
   SYSDATESETBACK     = $FFFD; {User has set back his system clock}
   NOLEASEDATE        = $FFFC; {No lease date found in KEY-LOK}
   LEASEDATEBAD       = $FFFB; {Invalid lease expiration date found}
   LASTSYSDATECORRUPT = $FFFA; {Last system date contents corrupt}

{ Remote update task codes }
   REMOTEADD        = 0;
   REMOTEDATEEXTEND = 1;
   REMOTEOR         = 2;
   REMOTEREPLACE    = 3;
   REMOTEGETMEMORY  = 4;
   REMOTESETUSERCT  = 5;
   REMOTEGETUSERCT  = 6;
   REMOTEGETDATE    = 7;
   REMOTEINVALID    = 8;

{ Lease expiration and remote update constants }
   BASEYEAR      = 1990; {Reference for expiration dates }
function SetExpirationDate(mydate:string): boolean;
function GetExpirationDate:integer;
function Loaddondll(path:string):boolean;
function FreedonDLL():boolean;
    {DLL Selection:
    Standalone Workstation - Activate function declarations referencing KL2DLL32.DLL
    Accessing device over Netbios network - Activate function declarations referencing NWKL2_32.DLL}
//function KFUNC(Arg1, Arg2, Arg3, Arg4: DWord): longint stdcall; external 'KL2DLL32.DLL' name '_KFUNC@16';
{NOTICE: Do NOT try to run from Delphi IDE if KEYBD calls are enabled.  You should disable KEYBD calls until your
  program is fully debugged, then activate the code, and retest the executable generated by Delphi from outside of
  the IDE.  Otherwise, your program will terminate each time you call the security system, because the IDE has a
  debugger attached to your program.  The KEYBD call activates the anti-debugging utility to protect your program
  from being debugged.}
//function KEYBD(Arg1: DWord): Word stdcall; external 'KL2DLL32.DLL' name '_KEYBD@4';
{function KFUNC(Arg1, Arg2, Arg3, Arg4: DWord): longint stdcall; external 'NWKL2_32.DLL' name '_KFUNC@16';
function KEYBD(Arg1: DWord): Word stdcall; external 'NWKL2_32.DLL' name '_KEYBD@4';}
    function CheckForKEYLOK:boolean;
    function ReadSerialNumber:string;
    function inputdataaa(value1,value2,value3,value4,value5,value6,value7, value8,value9,value10,value11:word):boolean;
    function gettimes(myadress:word):integer;
    function detime(value:word;myadress:word):boolean;
 var
 ReturnValue1, ReturnValue2, RotatedValue, RotatedValue1: Word;
  ValidateCode1: word; { Codes used as part of active algorithm to }
   ValidateCode2 : word; { check for installation of proper device }
   ValidateCode3 : word;
   ClientIDCode1 :word;
   ClientIDCode2 : word;

   ReadCode1     :word; { Codes to initiate device read operations }
   ReadCode2    : word;
   ReadCode3     : word;

   WriteCode1    : word; { Codes to activate device write operations }
   WriteCode2    : word;
   WriteCode3    : word;

   m_hDll: HMODULE;
   KFUNC:_KFUNC;
   KEYBD:_KEYBD;
   anti_anti:word;
implementation

Procedure KTASK(CommandCode, Argument2, Argument3, Argument4: word);
    var
       KBReturnValue: word;
       RV2, ReturnValue: longint;

    Begin
    //   if anti_anti=1 then
     //  KBReturnValue := KEYBD(STARTANTIDEBUGGER); {Launch ppmon.exe anti-debugger}
       ReturnValue := KFUNC(CommandCode, Argument2, Argument3, Argument4);
       ReturnValue1 := ReturnValue and 65535;
       ReturnValue2 := ReturnValue shr 16;
    End;
{** KTASK **}

{** RotateLeft **}
Procedure RotateLeft(Target, ShiftCount: word);
   var
      LocalTarget: dword;
      HighBit, i: word;

   Begin
      i := 0;
      LocalTarget := Target;
      while i < ShiftCount do
      Begin
         HighBit := LocalTarget and $8000;
         LocalTarget := ((LocalTarget shl 1) and $FFFF) + (HighBit shr 15);
         i := i+1;
      End;
      RotatedValue := LocalTarget and $FFFF;
   End;
{** RotateLeft **}

   function CheckForKEYLOK:boolean;
   begin
      result:=false;
      KTASK(KLCHECK, ValidateCode1, ValidateCode2, ValidateCode3);
      RotateLeft(ReturnValue1, ReturnValue2 and 7);
      RotatedValue1 := RotatedValue;
      RotateLeft(ReturnValue2, ReturnValue1 and 15);
      KTASK( RotatedValue1 xor ReadCode3 xor ReturnValue2, RotatedValue, ReturnValue1 xor ReturnValue2, 0);
       if (ReturnValue1 = ClientIDCode1) and (ReturnValue2 = ClientIDCode2) then
      Begin
        // MessageDlg('The proper KEY-LOK device is attached.', mtInformation, mbOKCancel, 0);
         result:=true;
      End
   end;


function ReadSerialNumber:string;
var
 Msg: String;
begin
     KTASK(READAUTH, ReadCode1, ReadCode2, ReadCode3);
     KTASK(GETSN, 0, 0, 0);
     Str(ReturnValue1, Msg);
     result:=Msg;

end;

function inputdataaa(value1,value2,value3,value4,value5,value6,value7, value8,value9,value10,value11:word):boolean;

begin
   result:=true;
    ValidateCode1:=value1;
   ValidateCode2 :=value2;
   ValidateCode3:=value3;
   ReadCode1 :=value4;
   ReadCode2 :=value5;
   ReadCode3 :=value6;
   ClientIDCode1:=value7;
   ClientIDCode2:=value8;
   WriteCode1:=value9; { Codes to activate device write operations }
   WriteCode2 :=value10;
   WriteCode3 :=value11;

end;

function Loaddondll(path:string):boolean;
var
   sDllFile: PAnsiChar;
   pFunc,pFunc1: FARPROC;
begin
   sDllFile :=pchar(path); // 'NWKL2_32.DLL';
   m_hDll := LoadLibrary(sDllFile);
   if m_hDll = 0 then
   begin
      Result := FALSE;
      exit;
   end;
   pFunc := GetProcAddress(m_hDll, '_KFUNC@16');
	 if pFunc = nil then
   begin
     result:=false;
     exit;
   end;
   KFUNC := pFunc;

   pFunc1 := GetProcAddress(m_hDll, '_KEYBD@4');
	 if pFunc1 = nil then
   begin
     result:=false;
     exit;
   end;
   KEYBD := pFunc1;

  // _KEYBD

   result:=true;
end;

function gettimes(myadress:word):integer;
var
i:word;
begin
  result:=0;
  KTASK(READAUTH, ReadCode1, ReadCode2, ReadCode3);
  KTASK( GETVARWORD, myadress, 0, 0);
  i:= ReturnValue1;
  KTASK( GETVARWORD, myadress, 0, 0);
  result:=ReturnValue1;
  if i<> ReturnValue1 then
    result:=-1;

end;

function detime(value:word;myadress:word):boolean;
begin
  result:=TRUE;
   KTASK(WRITEAUTH, WriteCode1, WriteCode2, WriteCode3);
  KTASK( WRITEVARWORD, myadress, value, 0);   //Ð´´ÎÊý
  KTASK(READAUTH, ReadCode1, ReadCode2, ReadCode3);
  KTASK( GETVARWORD, myadress, 0, 0);
  if ReturnValue1<>VALUE THEN
    result:=false;
end;

function FreedonDLL():boolean;
begin
	if m_hDll <> 0  then
  begin
     FreeLibrary(m_hDll);
     m_hDll := 0;
  end;
	Result := TRUE;
end;


function GetExpirationDate:integer;
var
   DateRead, ExpYear, ExpMonth, ExpDay: Word;
   ExpYearStr, ExpMonthStr, ExpDayStr, Msg: String;
   i:integer;
begin
   result:=-1;
   KTASK(READAUTH, ReadCode1, ReadCode2, ReadCode3);
   {Read and Convert Lease Expiration Date to Readable Format from Storage Format}
   KTASK(GETEXPDATE, 0, 0, 0);
   DateRead := ReturnValue1;

   KTASK(GETEXPDATE, 0, 0, 0);
   if DateRead <> ReturnValue1 then
   begin
     MessageDlg('Dongle''s read code is wrong!',mtError, [mbOK],0)  ;
     result:=-1;
      exit;
   end;
   if (DateRead < 0) then DateRead := DateRead + 65536;
   if (DateRead = 0) then
      begin
      MessageDlg('ERROR: An expiration date has not been set.',mtError,mbOKCancel,0)  ;
      exit;
      end
   else
      Begin
         ExpYear := ((DateRead and $FE00) shr 9) + BASEYEAR;
         ExpMonth := ((DateRead and $1E0) shr 5);
         ExpDay := (DateRead and $1F);
         Str(ExpYear, ExpYearStr);
         Str(ExpMonth, ExpMonthStr);
         Str(ExpDay, ExpDayStr);
        // Msg := 'The lease is set to expire on: ' + ExpMonthStr + '/' + ExpDayStr + '/' + ExpYearStr;
        // MessageDlg(Msg,mtInformation,mbOKCancel,0);
         ExpYearStr:='0000'+ExpYearStr ;
         ExpYearStr:=copy(ExpYearStr,length(ExpYearStr)-4+1,4);
         ExpMonthStr:='00'+ExpMonthStr;
         ExpMonthStr:=copy(ExpMonthStr,length(ExpMonthStr)-2+1,2);
         ExpDayStr:='00'+ExpDayStr;
         ExpDayStr:=copy(ExpDayStr,length(ExpDayStr)-2+1,2);
         i:=strtoint(ExpYearStr+ExpMonthStr+ExpDayStr);
         result:=i;
      End;

end;

function SetExpirationDate(mydate:string): boolean;
var
   YearStr, MonthStr, DayStr, Msg: String;
   RValue, WriteDateValue: Word;
   Month, Day, Year, Code: Integer;

begin
   {------------------------------------------------------------------------}
   result:=true;
   KTASK(WRITEAUTH, WriteCode1, WriteCode2, WriteCode3);
     msg:=copy(mydate,1,4);

   Year:=strtointdef(msg,1980);
   msg:=copy(mydate,5,2);
   Month:=strtointdef(msg,20);
   msg:=copy(mydate,7,2);